Post est occasio calva.
2444
------------------------------------------------------------------------
x8048760	<phase3>:		push   ebp
-	0x8048761	<phase3+1>:		mov    ebp,esp
-	0x8048763	<phase3+3>:		push   edi
-	0x8048764	<phase3+4>:		push   esi
-	0x8048765	<phase3+5>:		push   ebx
-	0x8048766	<phase3+6>:		sub    esp,0x14
-	0x8048769	<phase3+9>:		mov    edi,DWORD PTR [ebp+0x8]
========================================================================
edi =  endereço da nossa string
========================================================================
-	0x804876c	<phase3+12>:		push   edi
-	0x804876d	<phase3+13>:		call   0x8048490 <strlen@plt>
-	0x8048772	<phase3+18>:		mov    ebx,eax
========================================================================
ebx = tamanho da nossa string
========================================================================
-	0x8048774	<phase3+20>:		mov    esi,DWORD PTR ds:0x804b0e8
========================================================================
esi = endereço da string controlo (fogo)
========================================================================
-	0x804877a	<phase3+26>:		mov    DWORD PTR [esp],esi
-	0x804877d	<phase3+29>:		call   0x8048490 <strlen@plt>
-	0x8048782	<phase3+34>:		add    esp,0x4
-	0x8048785	<phase3+37>:		mov    DWORD PTR [ebp-0x20],eax
========================================================================
DWORD PTR [ebp-0x20] = tamanho da string controlo (4)
========================================================================
-	0x8048788	<phase3+40>:		lea    eax,[ebx-0x4]
-	0x804878b	<phase3+43>:		cmp    eax,0xb						<= verifica se é maior que 11
-	0x804878e	<phase3+46>:		ja     0x80487f0 <phase3+144>
-	0x8048790	<phase3+48>:		movsx  edx,BYTE PTR [edi]			<= Carrega o byte
========================================================================
edx = 1º byte N/String
========================================================================
-	0x8048793	<phase3+51>:		mov    ebx,0x0						
-	0x8048798	<phase3+56>:		mov    ecx,0x0
========================================================================
ebx = 0
ecx = 0
========================================================================
-	0x804879d	<phase3+61>:		lea    eax,[edx-0x61]
========================================================================
eax =  caracter - 0x61
========================================================================
-	0x80487a0	<phase3+64>:		cmp    eax,0x19						<=verifica se é maior que 25
-	0x80487a3	<phase3+67>:		ja     0x80487f0 <phase3+144>
-	0x80487a5	<phase3+69>:		movsx  eax,BYTE PTR [esi+ecx]
========================================================================
eax = carrega primeiro caracter da palavra de controlo
========================================================================
-	0x80487a9	<phase3+73>:		sub    edx,eax						
========================================================================
edx = nossa letra - caracter controlo
========================================================================
-	0x80487ab	<phase3+75>:		mov    eax,edx
========================================================================
eax = edx 
========================================================================
-	0x80487ad	<phase3+77>:		js     0x80487b4 <phase3+84>
-	0x80487af	<phase3+79>:		add    eax,0x61
========================================================================
eax = eax + 0x61
========================================================================
-	0x80487b2	<phase3+82>:		jmp    0x80487b7 <phase3+87>
-	0x80487b4	<phase3+84>:		add    eax,0x7b
-	0x80487b7	<phase3+87>:		mov    BYTE PTR [ebp+ebx-0x1c],al
========================================================================
BYTE PTR [ebp+ebx-0x1c] = byte de eax
========================================================================
-	0x80487bb	<phase3+91>:		inc    ebx
-	0x80487bc	<phase3+92>:		inc    ecx
========================================================================
ebx = ebx + 1
ecx = ecx + 1
========================================================================
-	0x80487bd	<phase3+93>:		cmp    ecx,DWORD PTR [ebp-0x20]		<= verifica contador com valor da memoria
-	0x80487c0	<phase3+96>:		jne    0x80487c7 <phase3+103>
-	0x80487c2	<phase3+98>:		mov    ecx,0x0
-	0x80487c7	<phase3+103>:		movsx  edx,BYTE PTR [edi+ebx]
========================================================================
edx = caracter par da nossa string
========================================================================
-	0x80487cb	<phase3+107>:		test   edx,edx						<= verifica se é zero
-	0x80487cd	<phase3+109>:		jne    0x804879d <phase3+61>		<= volta para trás
-	0x80487cf	<phase3+111>:		mov    BYTE PTR [ebp+ebx-0x1c],0x0	<= inclui terminador 0
-	0x80487d4	<phase3+116>:		push   DWORD PTR ds:0x804b0e4		
-	0x80487da	<phase3+122>:		lea    eax,[ebp-0x1c]
-	0x80487dd	<phase3+125>:		push   eax
-	0x80487de	<phase3+126>:		call   0x80484d0 <strcmp@plt>
-	0x80487e3	<phase3+131>:		add    esp,0x8
-	0x80487e6	<phase3+134>:		test   eax,eax						<= verifica se é zero
-	0x80487e8	<phase3+136>:		sete   al
-	0x80487eb	<phase3+139>:		movzx  eax,al
-	0x80487ee	<phase3+142>:		jmp    0x80487f5 <phase3+149>
-	0x80487f0	<phase3+144>:		mov    eax,0x0
-	0x80487f5	<phase3+149>:		lea    esp,[ebp-0xc]
-	0x80487f8	<phase3+152>:		pop    ebx
-	0x80487f9	<phase3+153>:		pop    esi
-	0x80487fa	<phase3+154>:		pop    edi
-	0x80487fb	<phase3+155>:		leave  
-	0x80487fc	<phase3+156>:		ret    
